// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for detecting duplicate files using hashing and fuzzy matching techniques.
 *
 * @exports `detectDuplicates` - A function that takes a file description and detects if it's a duplicate.
 * @exports `DetectDuplicatesInput` - The input type for the `detectDuplicates` function.
 * @exports `DetectDuplicatesOutput` - The output type for the `detectDuplicates` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectDuplicatesInputSchema = z.object({
  fileDescription: z.string().describe('A detailed description of the file, including its content, hash, and any other relevant metadata.'),
});
export type DetectDuplicatesInput = z.infer<typeof DetectDuplicatesInputSchema>;

const DetectDuplicatesOutputSchema = z.object({
  isDuplicate: z.boolean().describe('Whether the file is a duplicate or not.'),
  reason: z.string().describe('The reasoning for the decision.'),
  confidenceScore: z.number().min(0).max(1).describe('A score between 0 and 1 indicating the confidence of the duplicate detection.'),
});
export type DetectDuplicatesOutput = z.infer<typeof DetectDuplicatesOutputSchema>;


export async function detectDuplicates(input: DetectDuplicatesInput): Promise<DetectDuplicatesOutput> {
  return detectDuplicatesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectDuplicatesPrompt',
  input: {schema: DetectDuplicatesInputSchema},
  output: {schema: DetectDuplicatesOutputSchema},
  prompt: `You are an AI assistant that analyzes file descriptions to detect duplicates.

  Based on the provided file description, determine if the file is a duplicate.
  Use hashing for exact matches and consider fuzzy matching for near-duplicates.

  Provide a confidence score (0 to 1) indicating how sure you are about the detection.
  Explain your reasoning for the decision.

  File Description: {{{fileDescription}}}
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_ONLY_HIGH',
      },
    ],
  },
});

const detectDuplicatesFlow = ai.defineFlow(
  {
    name: 'detectDuplicatesFlow',
    inputSchema: DetectDuplicatesInputSchema,
    outputSchema: DetectDuplicatesOutputSchema,
  },
  async (input: DetectDuplicatesInput) => {
    const {output} = await prompt(input);
    return output!;
  }
);
