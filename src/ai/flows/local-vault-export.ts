// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for exporting a summary of cleanup actions to a Markdown file.
 *
 * @exports `exportToLocalVault` - A function that takes a list of proposed actions and generates a Markdown report.
 * @exports `ExportToLocalVaultInput` - The input type for the `exportToLocalVault` function.
 * @exports `ExportToLocalVaultOutput` - The output type for the `exportToLocalVault` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { ProposalSchema } from '@/lib/ai-types';


export const ExportToLocalVaultInputSchema = z.object({
  proposals: z.array(ProposalSchema).describe('A list of proposed file cleanup actions.'),
  totalBytes: z.number().describe('Total bytes that will be saved.'),
});
export type ExportToLocalVaultInput = z.infer<typeof ExportToLocalVaultInputSchema>;

export const ExportToLocalVaultOutputSchema = z.object({
  markdownReport: z.string().describe('A summary report of the cleanup actions in Markdown format.'),
});
export type ExportToLocalVaultOutput = z.infer<typeof ExportToLocalVaultOutputSchema>;


export async function exportToLocalVault(input: ExportToLocalVaultInput): Promise<ExportToLocalVaultOutput> {
  return exportToLocalVaultFlow(input);
}

const prompt = ai.definePrompt({
  name: 'exportToLocalVaultPrompt',
  input: {schema: ExportToLocalVaultInputSchema},
  output: {schema: ExportToLocalVaultOutputSchema},
  prompt: `You are an AI assistant that generates a clean, readable Markdown report summarizing a list of proposed file cleanup actions.

The report should have a title, a summary of the total space saved, and a table of the proposed actions.

Actions to summarize:
{{{json proposals}}}

Total space to be saved (in bytes): {{{totalBytes}}}
`,
});

const exportToLocalVaultFlow = ai.defineFlow(
  {
    name: 'exportToLocalVaultFlow',
    inputSchema: ExportToLocalVaultInputSchema,
    outputSchema: ExportToLocalVaultOutputSchema,
  },
  async (input: ExportToLocalVaultInput) => {
    const {output} = await prompt(input);
    return output!;
  }
);
