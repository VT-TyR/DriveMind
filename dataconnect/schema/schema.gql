# DriveMind GraphQL Schema (DataConnect)

"User in the system (derived from Firebase Auth)"
type User {
  id: ID!
  email: String
  createdAt: String
}

"A file indexed from Google Drive for delta scans and analytics"
type FileIndexEntry {
  id: ID!
  uid: ID!
  name: String!
  mimeType: String!
  size: Int!
  modifiedTime: String!
  parentId: String
  md5Checksum: String
  version: Int
  lastScanId: ID
  isDeleted: Boolean!
  createdAt: String
  updatedAt: String
}

"A background scan job and its final results"
type ScanJob {
  id: ID!
  uid: ID!
  status: String!
  type: String!
  createdAt: String!
  startedAt: String
  completedAt: String
  progress: ScanProgress
  results: ScanResults
  error: String
}

type ScanProgress {
  current: Int
  total: Int
  percentage: Int
  currentStep: String
  bytesProcessed: Int
}

type ScanResults {
  scanId: ID!
  filesFound: Int!
  duplicatesDetected: Int!
  totalSize: BigInt
  insights: ScanInsights
}

scalar BigInt

type ScanInsights {
  totalFiles: Int
  filesWithSize: Int
  workspaceFiles: Int
  duplicateGroups: Int
  totalSize: BigInt
  archiveCandidates: Int
  qualityScore: Int
}

"A detected duplicate group"
type DuplicateGroup {
  id: ID!
  uid: ID!
  scanId: ID
  sizeBytes: BigInt
  fileIds: [ID!]!
  count: Int!
  algorithm: String
  createdAt: String
}

type Query {
  files(uid: ID!, limit: Int = 50, after: ID): [FileIndexEntry!]!
  scans(uid: ID!, limit: Int = 20): [ScanJob!]!
  duplicates(uid: ID!, scanId: ID, limit: Int = 50): [DuplicateGroup!]!
}

input FileIndexInput {
  id: ID!
  uid: ID!
  name: String!
  mimeType: String!
  size: Int!
  modifiedTime: String!
  parentId: String
  md5Checksum: String
  version: Int
  lastScanId: ID
  isDeleted: Boolean!
  createdAt: String
  updatedAt: String
}

input DuplicateGroupInput {
  id: ID!
  uid: ID!
  scanId: ID
  sizeBytes: BigInt
  fileIds: [ID!]!
  count: Int!
  algorithm: String
  createdAt: String
}

input ScanResultsInput {
  id: ID!
  uid: ID!
  scanId: ID!
  filesFound: Int!
  duplicatesDetected: Int!
  totalSize: BigInt
}

type Mutation {
  upsertFileIndex(entries: [FileIndexInput!]!): Int!
  upsertDuplicateGroups(groups: [DuplicateGroupInput!]!): Int!
  recordScanResults(input: ScanResultsInput!): Boolean!
}

